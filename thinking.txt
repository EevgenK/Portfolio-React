├── public
├── src
│   └── main.tsx (або main.jsx)
├── server
│   └── server.js (або server.ts)
├── index.html
├── package.json
└── vite.config.js

npm i fastify cors

npm i -D @types/cors

server/server.js:

import Fastify from 'fastify';
import cors from '@fastify/cors';

const fastify = Fastify({ logger: true });

await fastify.register(cors, {
  origin: '*', // можна обмежити для безпеки
});

// Test route
fastify.get('/api/ping', async (request, reply) => {
  return { message: 'pong' };
});

// GitHub contributions proxy route
fastify.get('/api/github-contributions/:username', async (request, reply) => {
  const { username } = request.params;
  const response = await fetch(`https://ghchart.rshah.org/${username}`);
  const svg = await response.text();
  return reply.type('image/svg+xml').send(svg);
});

fastify.listen({ port: 5000 }, (err, address) => {
  if (err) {
    fastify.log.error(err);
    process.exit(1);
  }
  console.log(`🚀 Server running at ${address}`);
});

"scripts": {
  "dev": "vite",
  "serve": "node server/server.js"
}

Хук:

import { useEffect, useState } from 'react';

export const useGithubContributions = (username: string) => {
  const [svg, setSvg] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!username) return;

    const fetchContributions = async () => {
      try {
        setLoading(true);
        setError(null);

        const res = await fetch(`http://localhost:5000/api/github-contributions/${username}`);
        if (!res.ok) {
          throw new Error('Failed to fetch contributions');
        }
        const text = await res.text();
        setSvg(text);
      } catch (err: any) {
        setError(err.message || 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    fetchContributions();
  }, [username]);

  return { svg, loading, error };
};
Використання:
import { useGithubContributions } from './hooks/useGithubContributions';

export const GitHubChart = () => {
  const { svg, loading, error } = useGithubContributions('EevgenK');

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;

  return (
    <div
      dangerouslySetInnerHTML={{ __html: svg || '' }}
      style={{ width: '100%', maxWidth: 600 }}
    />
  );
};